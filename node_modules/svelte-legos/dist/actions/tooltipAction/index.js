import { hoverStore } from "../../stores/hoverStore";
import { append, attr, element, listen } from "svelte/internal";
class Tooltip {
    contents;
    anchorRect;
    __container;
    __placement;
    __displayPointer;
    static POINTER_SIZE = 8;
    constructor(contents, anchor, placement = "center", pointer = true) {
        this.contents = contents;
        this.anchorRect = anchor.getBoundingClientRect();
        this.__container = element("div");
        this.__placement = placement;
        this.__displayPointer = pointer;
        this.init();
    }
    init() {
        this.__container.style.setProperty("position", "absolute");
        this.__container.style.setProperty("top", "0px");
        this.__container.style.setProperty("left", "0px");
        this.__container.style.setProperty("z-index", "100000");
        this.__container.style.setProperty("background-color", "black");
        this.__container.style.setProperty("color", "white");
        this.__container.style.setProperty("padding", "5px 15px");
        this.__container.style.setProperty("border-radius", "4px");
        this.__container.style.setProperty("opacity", "0");
        this.__container.style.setProperty("visibility", "hidden");
        this.__container.style.setProperty("transition", "opacity .3s, visibility .3s");
        this.__container.style.setProperty("font-size", "12px");
        this.__container.textContent = this.contents;
        this.mount();
        this.position(window, this.anchorRect);
        if (this.__displayPointer)
            this.addPointer();
    }
    mount() {
        append(document.body, this.__container);
    }
    position(window, anchorRect) {
        let top, left;
        const { height, width } = anchorRect;
        const { top: anchorTop, height: anchorHeight, width: anchorWidth, left: anchorLeft, } = anchorRect;
        const { scrollY, scrollX } = window;
        if (this.__placement === "center") {
            top = anchorTop + scrollY - height - (this.__displayPointer ? Tooltip.POINTER_SIZE : 0);
            left = anchorLeft + scrollX + anchorWidth / 4 - width / 2;
        }
        else if (this.__placement === "left") {
            top = anchorTop + scrollY - height - (this.__displayPointer ? Tooltip.POINTER_SIZE : 0);
            left = anchorLeft + scrollX;
        }
        else {
            // right
            top = anchorTop + scrollY - height - (this.__displayPointer ? Tooltip.POINTER_SIZE : 0);
            left = anchorLeft + scrollX + anchorWidth / 2 - width;
        }
        this.__container.style.setProperty("top", top + "px");
        this.__container.style.setProperty("left", left + "px");
    }
    show() {
        this.mount();
        this.__container.style.setProperty("opacity", "1");
        this.__container.style.setProperty("visibility", "visible");
    }
    hide() {
        this.unmount();
        this.__container.style.setProperty("opacity", "0");
        this.__container.style.setProperty("visibility", "hidden");
    }
    unmount() {
        this.__container.remove();
    }
    addPointer() {
        const pointerX = this.__placement === "center"
            ? "left: 50%;"
            : this.__placement === "left"
                ? "left: 20%;"
                : "right: 20%;";
        const styles = `
      width: 0;
      height: 0;
      border-left: ${Tooltip.POINTER_SIZE}px solid transparent;
      border-right: ${Tooltip.POINTER_SIZE}px solid transparent;
      border-top: ${Tooltip.POINTER_SIZE}px solid black;
      position: absolute;
      ${pointerX}
      bottom: 0;
      transform: translate(-50%, 98%);
    `;
        const span = element("span");
        attr(span, "style", styles);
        append(this.__container, span);
    }
}
export function tooltipAction(node, options) {
    let tooltip;
    function positionTooltip() {
        tooltip.position(window, node.getBoundingClientRect());
    }
    const cleanup = listen(window, "resize", positionTooltip);
    if (typeof options === "string") {
        tooltip = new Tooltip(options, node, "center");
    }
    else {
        tooltip = new Tooltip(options.content, node, options.placement, options.pointer);
    }
    const unsub = hoverStore(node).subscribe((hover) => {
        if (hover)
            tooltip.show();
        else
            tooltip.hide();
    });
    function stop() {
        cleanup();
        tooltip.unmount();
        unsub();
    }
    return {
        destroy() {
            stop();
        },
    };
}
