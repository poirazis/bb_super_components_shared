export function scrollToBottomAction(node, immediate = true) {
    let stop;
    const destroy = () => {
        stop && stop();
    };
    const update = () => {
        destroy();
        function mutationCallback() {
            const { clientHeight, scrollHeight } = node;
            if (scrollHeight > clientHeight) {
                if (node.scrollTo) {
                    node.scrollTo({
                        behavior: "smooth",
                        top: scrollHeight,
                    });
                }
                else {
                    node.scrollTop = scrollHeight;
                }
            }
        }
        const mutationObserver = new MutationObserver(mutationCallback);
        mutationObserver.observe(node, { childList: true, subtree: true });
        if (immediate)
            mutationCallback();
        stop = () => {
            mutationObserver.disconnect();
        };
    };
    update();
    return {
        update,
        destroy,
    };
}
