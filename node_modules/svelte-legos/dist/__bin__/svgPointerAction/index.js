const SVG_POINTER_EVENT = {
    Move: "svg.pointermove",
    Down: "svg.pointerdown",
    Up: "svg.pointerup",
    Click: "svg.click",
};
/**
 * Facilitates retrieving the pointer's position as transformed by the host viewboxed svg element's
 * auto-scaling.
 *
 * @see https://stackoverflow.com/questions/10298658/mouse-position-inside-autoscaled-svg
 */
export default function svgPointerAction(svg, {} = {}) {
    const pt = svg.createSVGPoint();
    function getSvgPointer(e) {
        pt.x = e.clientX;
        pt.y = e.clientY;
        const transformed = pt.matrixTransform(svg.getScreenCTM()?.inverse());
        return {
            x: transformed.x,
            y: transformed.y,
            originalEvent: e,
        };
    }
    function handlePointerMove(e) {
        svg.dispatchEvent(new CustomEvent(SVG_POINTER_EVENT.Move, { detail: getSvgPointer(e) }));
    }
    function handlePointerDown(e) {
        svg.dispatchEvent(new CustomEvent(SVG_POINTER_EVENT.Down, { detail: getSvgPointer(e) }));
    }
    function handlePointerUp(e) {
        svg.dispatchEvent(new CustomEvent(SVG_POINTER_EVENT.Up, { detail: getSvgPointer(e) }));
    }
    function handleClick(e) {
        svg.dispatchEvent(new CustomEvent(SVG_POINTER_EVENT.Click, { detail: getSvgPointer(e) }));
    }
    svg.addEventListener("pointermove", handlePointerMove);
    svg.addEventListener("pointerdown", handlePointerDown);
    svg.addEventListener("pointerup", handlePointerUp);
    svg.addEventListener("click", handleClick);
    return {
        update(args) { },
        destroy() {
            svg.removeEventListener("pointermove", handlePointerMove);
            svg.removeEventListener("pointerdown", handlePointerDown);
            svg.removeEventListener("pointerup", handlePointerUp);
            svg.removeEventListener("click", handleClick);
        },
    };
}
