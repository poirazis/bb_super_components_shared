import { tryOnDestroy } from "../../shared";
import { writable } from "svelte/store";
/**
 * Wrapper for `setTimeout` with controls.
 *
 * @param cb
 * @param interval
 * @param options
 */
export function timeoutFnStore(fn, interval = 1000, options = {}) {
    const { immediate = true } = options;
    const { set, subscribe } = writable(false);
    let timerId = null;
    function stop() {
        if (timerId !== null) {
            clearTimeout(timerId);
            timerId = null;
        }
    }
    function start(...args) {
        stop();
        set(true);
        timerId = setTimeout(() => {
            set(false);
            timerId = null;
            fn(...args);
        }, interval);
    }
    function changeDuration(newDuration) {
        interval = newDuration;
    }
    if (immediate) {
        start();
    }
    tryOnDestroy(stop);
    return {
        isPending: { subscribe },
        stop,
        start,
        changeDuration,
    };
}
