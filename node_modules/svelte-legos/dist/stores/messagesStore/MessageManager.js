import { append, attr, element } from "svelte/internal";
import Message, {} from "./Message";
export default class MessageManager {
    static __instance;
    __container;
    constructor() { }
    createContainer() {
        if (this.__container)
            return;
        const container = element("div");
        const containerStyles = `
        padding-top: 16px;
        position: fixed;
        pointer-events: none;
        top: 0;
        left: 50%;
        bottom: 0;
        z-index: 100000;
        transform: translateX(-50%);
      `;
        attr(container, "style", containerStyles);
        this.__container = container;
        append(document.body, this.__container);
    }
    createMessage(message, type) {
        this.createContainer();
        const notification = new Message(message, type, () => {
            this.checkAndUnmount();
        });
        notification.mount(this.__container);
        requestAnimationFrame(() => {
            notification.show();
        });
    }
    checkAndUnmount() {
        if (this.__container) {
            if (this.__container.childElementCount === 0) {
                this.__container.remove();
                this.__container = undefined;
            }
        }
    }
    static getInstance() {
        if (!this.__instance)
            this.__instance = new MessageManager();
        return this.__instance;
    }
}
