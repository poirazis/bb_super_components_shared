import { defaultWindow, tryOnDestroy, writableToReadable } from "../../shared";
import { writable } from "svelte/store";
import { eventListenerStore } from "../eventListenerStore";
export function networkStore(options = {}) {
    const { window = defaultWindow } = options;
    const navigator = window?.navigator;
    const isSupported = !!(navigator && "connection" in navigator);
    const store = writable({
        isSupported,
        isOnline: true,
        saveData: false,
        offlineAt: undefined,
        onlineAt: undefined,
        downlink: undefined,
        downlinkMax: undefined,
        rtt: undefined,
        effectiveType: undefined,
        type: "unknown",
    });
    const connection = isSupported && navigator.connection;
    function updateNetworkInformation() {
        if (!navigator)
            return;
        const state = {};
        state["isOnline"] = navigator.onLine;
        state["offlineAt"] = state.isOnline ? undefined : Date.now();
        state["onlineAt"] = state.isOnline ? Date.now() : undefined;
        if (connection) {
            state["downlink"] = connection.downlink;
            state["downlinkMax"] = connection.downlinkMax;
            state["effectiveType"] = connection.effectiveType;
            state["rtt"] = connection.rtt;
            state["saveData"] = connection.saveData;
            state["type"] = connection.type;
        }
        store.update((oldState) => ({ ...oldState, ...state }));
    }
    if (window) {
        eventListenerStore("offline", () => {
            store.update((state) => ({
                ...state,
                isOnline: false,
                offlineAt: Date.now(),
            }));
        });
        eventListenerStore("online", () => {
            store.update((state) => ({
                ...state,
                isOnline: true,
                onlineAt: Date.now(),
            }));
        });
    }
    if (connection) {
        connection.addEventListener("change", updateNetworkInformation, false);
        tryOnDestroy(() => {
            connection.removeEventListener("change", updateNetworkInformation);
        });
    }
    updateNetworkInformation();
    return writableToReadable(store);
}
