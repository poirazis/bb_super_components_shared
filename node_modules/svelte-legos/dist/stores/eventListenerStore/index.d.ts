interface UseEventListenerReturnType {
    start: () => void;
    stop: () => void;
}
export declare function eventListenerStore<K extends keyof MediaQueryListEventMap>(eventName: K, handler: (event: MediaQueryListEventMap[K]) => void, element: MediaQueryList, options?: boolean | AddEventListenerOptions): UseEventListenerReturnType;
export declare function eventListenerStore<K extends keyof WindowEventMap>(eventName: K, handler: (event: WindowEventMap[K]) => void, element?: undefined, options?: boolean | AddEventListenerOptions): UseEventListenerReturnType;
export declare function eventListenerStore<K extends keyof HTMLElementEventMap, T extends HTMLElement = HTMLDivElement>(eventName: K, handler: (event: HTMLElementEventMap[K]) => void, element: T, options?: boolean | AddEventListenerOptions): UseEventListenerReturnType;
export declare function eventListenerStore<K extends keyof DocumentEventMap>(eventName: K, handler: (event: DocumentEventMap[K]) => void, element: Document, options?: boolean | AddEventListenerOptions): UseEventListenerReturnType;
export {};
