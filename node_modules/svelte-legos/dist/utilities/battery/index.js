import { defaultWindow } from "../../shared";
import { eventListenerStore } from "../../stores/eventListenerStore";
import { readable } from "svelte/store";
import { listen } from "svelte/internal";
export function battery() {
    const events = ["chargingchange", "chargingtimechange", "dischargingtimechange", "levelchange"];
    let isSupported = false;
    let charging = false;
    let chargingTime = 0;
    let dischargingTime = 0;
    let level = 1;
    let battery;
    let stop = [() => { }];
    return readable({ isSupported, charging, chargingTime, dischargingTime, level }, (set) => {
        isSupported = !!(defaultWindow &&
            defaultWindow.navigator &&
            "getBattery" in defaultWindow.navigator);
        if (isSupported) {
            function updateBatteryInfo() {
                charging = this.charging;
                chargingTime = this.chargingTime || 0;
                dischargingTime = this.dischargingTime || 0;
                level = this.level;
                set({ isSupported, charging, chargingTime, dischargingTime, level });
            }
            navigator.getBattery().then((_battery) => {
                battery = _battery;
                updateBatteryInfo.call(battery);
                for (const event of events) {
                    stop.push(() => {
                        if (battery !== null) {
                            listen(battery, event, updateBatteryInfo, { passive: true });
                        }
                    });
                }
            });
            return () => {
                for (const fn of stop) {
                    fn();
                }
            };
        }
    });
}
