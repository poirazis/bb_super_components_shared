"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  APP_QUOTA_NAMES: () => APP_QUOTA_NAMES,
  AUDIT_LOG_TYPE: () => AUDIT_LOG_TYPE,
  AccountSSOProvider: () => AccountSSOProvider,
  AccountSSOProviderType: () => AccountSSOProviderType,
  AnalyticsEvent: () => AnalyticsEvent,
  AppBackupStatus: () => AppBackupStatus,
  AppBackupTrigger: () => AppBackupTrigger,
  AppBackupType: () => AppBackupType,
  AppEnvironment: () => AppEnvironment,
  ArrayOperator: () => ArrayOperator,
  AsyncEvents: () => AsyncEvents,
  AuditLogResourceStatus: () => AuditLogResourceStatus,
  AuditLogSystemUser: () => AuditLogSystemUser,
  AuditedEventFriendlyName: () => AuditedEventFriendlyName,
  AuthType: () => AuthType,
  AutoFieldSubType: () => AutoFieldSubType,
  AutoReason: () => AutoReason,
  AutomationActionStepId: () => AutomationActionStepId,
  AutomationCustomIOType: () => AutomationCustomIOType,
  AutomationEventType: () => AutomationEventType,
  AutomationFeature: () => AutomationFeature,
  AutomationIOType: () => AutomationIOType,
  AutomationStatus: () => AutomationStatus,
  AutomationStepIdArray: () => AutomationStepIdArray,
  AutomationStepStatus: () => AutomationStepStatus,
  AutomationStepType: () => AutomationStepType,
  AutomationStoppedReason: () => AutomationStoppedReason,
  AutomationTriggerStepId: () => AutomationTriggerStepId,
  BBReferenceFieldSubType: () => BBReferenceFieldSubType,
  BREAKDOWN_QUOTA_NAMES: () => BREAKDOWN_QUOTA_NAMES,
  BasicOperator: () => BasicOperator,
  BreakdownQuotaName: () => BreakdownQuotaName,
  CommandWord: () => CommandWord,
  ConfigType: () => ConfigType,
  ConstantQuotaName: () => ConstantQuotaName,
  DSPlusOperation: () => DSPlusOperation,
  DatasourceFeature: () => DatasourceFeature,
  DatasourceFieldType: () => DatasourceFieldType,
  DocumentType: () => DocumentType,
  DocumentTypesToImport: () => DocumentTypesToImport,
  EmptyFilterOption: () => EmptyFilterOption,
  Event: () => Event,
  EventPublishType: () => EventPublishType,
  Feature: () => Feature,
  FeatureFlag: () => FeatureFlag,
  FieldType: () => FieldType,
  FilterType: () => FilterType,
  FormulaType: () => FormulaType,
  GroupType: () => GroupType,
  Hosting: () => Hosting,
  HttpMethod: () => HttpMethod,
  INTERNAL_TABLE_SOURCE_ID: () => INTERNAL_TABLE_SOURCE_ID,
  IdentityType: () => IdentityType,
  IncludeRelationship: () => IncludeRelationship,
  InitType: () => InitType,
  InternalSearchFilterOperator: () => InternalSearchFilterOperator,
  InternalTable: () => InternalTable,
  JsonFieldSubType: () => JsonFieldSubType,
  JsonTypes: () => JsonTypes,
  LockName: () => LockName,
  LockType: () => LockType,
  MaintenanceType: () => MaintenanceType,
  MigrationName: () => MigrationName,
  MigrationType: () => MigrationType,
  MonthlyQuotaName: () => MonthlyQuotaName,
  Operation: () => Operation,
  PASSWORD_REPLACEMENT: () => PASSWORD_REPLACEMENT,
  PLUGIN_TYPE_ARR: () => PLUGIN_TYPE_ARR,
  PermissionLevel: () => PermissionLevel,
  PermissionSource: () => PermissionSource,
  PermissionType: () => PermissionType,
  PingSource: () => PingSource,
  PlanModel: () => PlanModel,
  PlanType: () => PlanType,
  PluginSource: () => PluginSource,
  PluginType: () => PluginType,
  PriceDuration: () => PriceDuration,
  QueryType: () => QueryType,
  QuotaType: () => QuotaType,
  QuotaUsageType: () => QuotaUsageType,
  RangeOperator: () => RangeOperator,
  RelationshipType: () => RelationshipType,
  RestAuthType: () => RestAuthType,
  RowOperations: () => RowOperations,
  SEPARATOR: () => SEPARATOR,
  SQLiteType: () => SQLiteType,
  SSOProviderType: () => SSOProviderType,
  ScheduleRepeatPeriod: () => ScheduleRepeatPeriod,
  ScheduleType: () => ScheduleType,
  SearchIndex: () => SearchIndex,
  ServiceType: () => ServiceType,
  SortOption: () => SortOption,
  SortOrder: () => SortOrder,
  SortType: () => SortType,
  SourceName: () => SourceName,
  SqlClient: () => SqlClient,
  StaticQuotaName: () => StaticQuotaName,
  TableSourceType: () => TableSourceType,
  TenantResolutionStrategy: () => TenantResolutionStrategy,
  UNICODE_MAX: () => UNICODE_MAX,
  UserGroupSyncEvents: () => UserGroupSyncEvents,
  UserStatus: () => UserStatus,
  ViewCalculation: () => ViewCalculation,
  VirtualDocumentType: () => VirtualDocumentType,
  WebhookActionType: () => WebhookActionType,
  isAppBackupMetadata: () => isAppBackupMetadata,
  isCloudAccount: () => isCloudAccount,
  isConstantQuota: () => isConstantQuota,
  isCreatePasswordAccount: () => isCreatePasswordAccount,
  isDocument: () => isDocument,
  isGoogleConfig: () => isGoogleConfig,
  isManyToMany: () => isManyToMany,
  isManyToOne: () => isManyToOne,
  isMonthlyQuota: () => isMonthlyQuota,
  isOIDCConfig: () => isOIDCConfig,
  isOneToMany: () => isOneToMany,
  isPasswordAccount: () => isPasswordAccount,
  isRelationshipField: () => isRelationshipField,
  isSCIMConfig: () => isSCIMConfig,
  isSMTPConfig: () => isSMTPConfig,
  isSSOAccount: () => isSSOAccount,
  isSSOUser: () => isSSOUser,
  isSelfHostAccount: () => isSelfHostAccount,
  isSettingsConfig: () => isSettingsConfig,
  isStaticQuota: () => isStaticQuota,
  isUser: () => isUser,
  isVerifiableSSOProvider: () => isVerifiableSSOProvider,
  prefixed: () => prefixed
});
module.exports = __toCommonJS(src_exports);

// src/sdk/hosting.ts
var Hosting = /* @__PURE__ */ ((Hosting2) => {
  Hosting2["CLOUD"] = "cloud";
  Hosting2["SELF"] = "self";
  return Hosting2;
})(Hosting || {});

// src/sdk/events/event.ts
var Event = /* @__PURE__ */ ((Event2) => {
  Event2["USER_CREATED"] = "user:created";
  Event2["USER_UPDATED"] = "user:updated";
  Event2["USER_DELETED"] = "user:deleted";
  Event2["USER_ONBOARDING_COMPLETE"] = "user:onboarding:complete";
  Event2["USER_PERMISSION_ADMIN_ASSIGNED"] = "user:admin:assigned";
  Event2["USER_PERMISSION_ADMIN_REMOVED"] = "user:admin:removed";
  Event2["USER_PERMISSION_BUILDER_ASSIGNED"] = "user:builder:assigned";
  Event2["USER_PERMISSION_BUILDER_REMOVED"] = "user:builder:removed";
  Event2["USER_INVITED"] = "user:invited";
  Event2["USER_INVITED_ACCEPTED"] = "user:invite:accepted";
  Event2["USER_PASSWORD_FORCE_RESET"] = "user:password:force:reset";
  Event2["USER_PASSWORD_UPDATED"] = "user:password:updated";
  Event2["USER_PASSWORD_RESET_REQUESTED"] = "user:password:reset:requested";
  Event2["USER_PASSWORD_RESET"] = "user:password:reset";
  Event2["USER_DATA_COLLABORATION"] = "user:data:collaboration";
  Event2["EMAIL_SMTP_CREATED"] = "email:smtp:created";
  Event2["EMAIL_SMTP_UPDATED"] = "email:smtp:updated";
  Event2["AUTH_SSO_CREATED"] = "auth:sso:created";
  Event2["AUTH_SSO_UPDATED"] = "auth:sso:updated";
  Event2["AUTH_SSO_ACTIVATED"] = "auth:sso:activated";
  Event2["AUTH_SSO_DEACTIVATED"] = "auth:sso:deactivated";
  Event2["AUTH_LOGIN"] = "auth:login";
  Event2["AUTH_LOGOUT"] = "auth:logout";
  Event2["ORG_NAME_UPDATED"] = "org:info:name:updated";
  Event2["ORG_LOGO_UPDATED"] = "org:info:logo:updated";
  Event2["ORG_PLATFORM_URL_UPDATED"] = "org:platformurl:updated";
  Event2["INSTALLATION_VERSION_CHECKED"] = "installation:version:checked";
  Event2["INSTALLATION_VERSION_UPGRADED"] = "installation:version:upgraded";
  Event2["INSTALLATION_VERSION_DOWNGRADED"] = "installation:version:downgraded";
  Event2["INSTALLATION_FIRST_STARTUP"] = "installation:firstStartup";
  Event2["ANALYTICS_OPT_OUT"] = "analytics:opt:out";
  Event2["ANALYTICS_OPT_IN"] = "analytics:opt:in";
  Event2["APP_CREATED"] = "app:created";
  Event2["APP_UPDATED"] = "app:updated";
  Event2["APP_DELETED"] = "app:deleted";
  Event2["APP_DUPLICATED"] = "app:duplicated";
  Event2["APP_PUBLISHED"] = "app:published";
  Event2["APP_UNPUBLISHED"] = "app:unpublished";
  Event2["APP_TEMPLATE_IMPORTED"] = "app:template:imported";
  Event2["APP_FILE_IMPORTED"] = "app:file:imported";
  Event2["APP_VERSION_UPDATED"] = "app:version:updated";
  Event2["APP_VERSION_REVERTED"] = "app:version:reverted";
  Event2["APP_REVERTED"] = "app:reverted";
  Event2["APP_EXPORTED"] = "app:exported";
  Event2["ROLE_CREATED"] = "role:created";
  Event2["ROLE_UPDATED"] = "role:updated";
  Event2["ROLE_DELETED"] = "role:deleted";
  Event2["ROLE_ASSIGNED"] = "role:assigned";
  Event2["ROLE_UNASSIGNED"] = "role:unassigned";
  Event2["SERVED_BUILDER"] = "served:builder";
  Event2["SERVED_APP"] = "served:app";
  Event2["SERVED_APP_PREVIEW"] = "served:app:preview";
  Event2["DATASOURCE_CREATED"] = "datasource:created";
  Event2["DATASOURCE_UPDATED"] = "datasource:updated";
  Event2["DATASOURCE_DELETED"] = "datasource:deleted";
  Event2["QUERY_CREATED"] = "query:created";
  Event2["QUERY_UPDATED"] = "query:updated";
  Event2["QUERY_DELETED"] = "query:deleted";
  Event2["QUERY_IMPORT"] = "query:import";
  Event2["QUERIES_RUN"] = "queries:run";
  Event2["QUERY_PREVIEWED"] = "query:previewed";
  Event2["TABLE_CREATED"] = "table:created";
  Event2["TABLE_UPDATED"] = "table:updated";
  Event2["TABLE_DELETED"] = "table:deleted";
  Event2["TABLE_EXPORTED"] = "table:exported";
  Event2["TABLE_IMPORTED"] = "table:imported";
  Event2["TABLE_DATA_IMPORTED"] = "table:data:imported";
  Event2["VIEW_CREATED"] = "view:created";
  Event2["VIEW_UPDATED"] = "view:updated";
  Event2["VIEW_DELETED"] = "view:deleted";
  Event2["VIEW_EXPORTED"] = "view:exported";
  Event2["VIEW_FILTER_CREATED"] = "view:filter:created";
  Event2["VIEW_FILTER_UPDATED"] = "view:filter:updated";
  Event2["VIEW_FILTER_DELETED"] = "view:filter:deleted";
  Event2["VIEW_CALCULATION_CREATED"] = "view:calculation:created";
  Event2["VIEW_CALCULATION_UPDATED"] = "view:calculation:updated";
  Event2["VIEW_CALCULATION_DELETED"] = "view:calculation:deleted";
  Event2["ROWS_CREATED"] = "rows:created";
  Event2["ROWS_IMPORTED"] = "rows:imported";
  Event2["COMPONENT_CREATED"] = "component:created";
  Event2["COMPONENT_DELETED"] = "component:deleted";
  Event2["SCREEN_CREATED"] = "screen:created";
  Event2["SCREEN_DELETED"] = "screen:deleted";
  Event2["LAYOUT_CREATED"] = "layout:created";
  Event2["LAYOUT_DELETED"] = "layout:deleted";
  Event2["AUTOMATION_CREATED"] = "automation:created";
  Event2["AUTOMATION_DELETED"] = "automation:deleted";
  Event2["AUTOMATION_TESTED"] = "automation:tested";
  Event2["AUTOMATIONS_RUN"] = "automations:run";
  Event2["AUTOMATION_STEP_CREATED"] = "automation:step:created";
  Event2["AUTOMATION_STEP_DELETED"] = "automation:step:deleted";
  Event2["AUTOMATION_TRIGGER_UPDATED"] = "automation:trigger:updated";
  Event2["LICENSE_PLAN_CHANGED"] = "license:plan:changed";
  Event2["LICENSE_ACTIVATED"] = "license:activated";
  Event2["LICENSE_PAYMENT_FAILED"] = "license:payment:failed";
  Event2["LICENSE_PAYMENT_RECOVERED"] = "license:payment:recovered";
  Event2["LICENSE_CHECKOUT_OPENED"] = "license:checkout:opened";
  Event2["LICENSE_CHECKOUT_SUCCESS"] = "license:checkout:success";
  Event2["LICENSE_PORTAL_OPENED"] = "license:portal:opened";
  Event2["ACCOUNT_CREATED"] = "account:created";
  Event2["ACCOUNT_DELETED"] = "account:deleted";
  Event2["ACCOUNT_VERIFIED"] = "account:verified";
  Event2["APP_BACKFILL_SUCCEEDED"] = "app:backfill:succeeded";
  Event2["APP_BACKFILL_FAILED"] = "app:backfill:failed";
  Event2["TENANT_BACKFILL_SUCCEEDED"] = "tenant:backfill:succeeded";
  Event2["TENANT_BACKFILL_FAILED"] = "tenant:backfill:failed";
  Event2["INSTALLATION_BACKFILL_SUCCEEDED"] = "installation:backfill:succeeded";
  Event2["INSTALLATION_BACKFILL_FAILED"] = "installation:backfill:failed";
  Event2["USER_GROUP_CREATED"] = "user_group:created";
  Event2["USER_GROUP_UPDATED"] = "user_group:updated";
  Event2["USER_GROUP_DELETED"] = "user_group:deleted";
  Event2["USER_GROUP_USERS_ADDED"] = "user_group:user_added";
  Event2["USER_GROUP_USERS_REMOVED"] = "user_group:users_deleted";
  Event2["USER_GROUP_PERMISSIONS_EDITED"] = "user_group:permissions_edited";
  Event2["USER_GROUP_ONBOARDING"] = "user_group:onboarding_added";
  Event2["PLUGIN_INIT"] = "plugin:init";
  Event2["PLUGIN_IMPORTED"] = "plugin:imported";
  Event2["PLUGIN_DELETED"] = "plugin:deleted";
  Event2["APP_BACKUP_RESTORED"] = "app:backup:restored";
  Event2["APP_BACKUP_TRIGGERED"] = "app:backup:triggered";
  Event2["ENVIRONMENT_VARIABLE_CREATED"] = "environment_variable:created";
  Event2["ENVIRONMENT_VARIABLE_DELETED"] = "environment_variable:deleted";
  Event2["ENVIRONMENT_VARIABLE_UPGRADE_PANEL_OPENED"] = "environment_variable:upgrade_panel_opened";
  Event2["AUDIT_LOGS_FILTERED"] = "audit_log:filtered";
  Event2["AUDIT_LOGS_DOWNLOADED"] = "audit_log:downloaded";
  return Event2;
})(Event || {});
var UserGroupSyncEvents = [
  "user:created" /* USER_CREATED */,
  "user:updated" /* USER_UPDATED */,
  "user:deleted" /* USER_DELETED */,
  "user:admin:assigned" /* USER_PERMISSION_ADMIN_ASSIGNED */,
  "user:admin:removed" /* USER_PERMISSION_ADMIN_REMOVED */,
  "user:builder:assigned" /* USER_PERMISSION_BUILDER_ASSIGNED */,
  "user:builder:removed" /* USER_PERMISSION_BUILDER_REMOVED */,
  "user_group:created" /* USER_GROUP_CREATED */,
  "user_group:updated" /* USER_GROUP_UPDATED */,
  "user_group:deleted" /* USER_GROUP_DELETED */,
  "user_group:user_added" /* USER_GROUP_USERS_ADDED */,
  "user_group:users_deleted" /* USER_GROUP_USERS_REMOVED */,
  "user_group:permissions_edited" /* USER_GROUP_PERMISSIONS_EDITED */
];
var AsyncEvents = [...UserGroupSyncEvents];
var AuditedEventFriendlyName = {
  // USER
  ["user:created" /* USER_CREATED */]: `User "{{ email }}" created{{#if viaScim}} via SCIM{{/if}}`,
  ["user:updated" /* USER_UPDATED */]: `User "{{ email }}" updated{{#if viaScim}} via SCIM{{/if}}`,
  ["user:deleted" /* USER_DELETED */]: `User "{{ email }}" deleted{{#if viaScim}} via SCIM{{/if}}`,
  ["user:admin:assigned" /* USER_PERMISSION_ADMIN_ASSIGNED */]: `User "{{ email }}" admin role assigned`,
  ["user:admin:removed" /* USER_PERMISSION_ADMIN_REMOVED */]: `User "{{ email }}" admin role removed`,
  ["user:builder:assigned" /* USER_PERMISSION_BUILDER_ASSIGNED */]: `User "{{ email }}" builder role assigned`,
  ["user:builder:removed" /* USER_PERMISSION_BUILDER_REMOVED */]: `User "{{ email }}" builder role removed`,
  ["user:invited" /* USER_INVITED */]: `User "{{ email }}" invited`,
  ["user:invite:accepted" /* USER_INVITED_ACCEPTED */]: `User "{{ email }}" accepted invite`,
  ["user:password:updated" /* USER_PASSWORD_UPDATED */]: `User "{{ email }}" password updated`,
  ["user:password:reset:requested" /* USER_PASSWORD_RESET_REQUESTED */]: `User "{{ email }}" password reset requested`,
  ["user:password:reset" /* USER_PASSWORD_RESET */]: `User "{{ email }}" password reset`,
  ["user_group:created" /* USER_GROUP_CREATED */]: `User group "{{ name }}" created{{#if viaScim}} via SCIM{{/if}}`,
  ["user_group:updated" /* USER_GROUP_UPDATED */]: `User group "{{ name }}" updated{{#if viaScim}} via SCIM{{/if}}`,
  ["user_group:deleted" /* USER_GROUP_DELETED */]: `User group "{{ name }}" deleted{{#if viaScim}} via SCIM{{/if}}`,
  ["user_group:user_added" /* USER_GROUP_USERS_ADDED */]: `User group "{{ name }}" {{ count }} users added{{#if viaScim}} via SCIM{{/if}}`,
  ["user_group:users_deleted" /* USER_GROUP_USERS_REMOVED */]: `User group "{{ name }}" {{ count }} users removed{{#if viaScim}} via SCIM{{/if}}`,
  ["user_group:permissions_edited" /* USER_GROUP_PERMISSIONS_EDITED */]: `User group "{{ name }}" permissions edited`,
  ["user:password:force:reset" /* USER_PASSWORD_FORCE_RESET */]: void 0,
  ["user_group:onboarding_added" /* USER_GROUP_ONBOARDING */]: void 0,
  ["user:onboarding:complete" /* USER_ONBOARDING_COMPLETE */]: void 0,
  ["user:data:collaboration" /* USER_DATA_COLLABORATION */]: void 0,
  // EMAIL
  ["email:smtp:created" /* EMAIL_SMTP_CREATED */]: `Email configuration created`,
  ["email:smtp:updated" /* EMAIL_SMTP_UPDATED */]: `Email configuration updated`,
  // AUTH
  ["auth:sso:created" /* AUTH_SSO_CREATED */]: `SSO configuration created`,
  ["auth:sso:updated" /* AUTH_SSO_UPDATED */]: `SSO configuration updated`,
  ["auth:sso:activated" /* AUTH_SSO_ACTIVATED */]: `SSO configuration activated`,
  ["auth:sso:deactivated" /* AUTH_SSO_DEACTIVATED */]: `SSO configuration deactivated`,
  ["auth:login" /* AUTH_LOGIN */]: `User "{{ email }}" logged in`,
  ["auth:logout" /* AUTH_LOGOUT */]: `User "{{ email }}" logged out`,
  // ORG
  ["org:info:name:updated" /* ORG_NAME_UPDATED */]: `Organisation name updated`,
  ["org:info:logo:updated" /* ORG_LOGO_UPDATED */]: `Organisation logo updated`,
  ["org:platformurl:updated" /* ORG_PLATFORM_URL_UPDATED */]: `Organisation platform URL updated`,
  // APP
  ["app:created" /* APP_CREATED */]: `App "{{ name }}" created`,
  ["app:updated" /* APP_UPDATED */]: `App "{{ name }}" updated`,
  ["app:deleted" /* APP_DELETED */]: `App "{{ name }}" deleted`,
  ["app:duplicated" /* APP_DUPLICATED */]: `App "{{ name }}" duplicated`,
  ["app:published" /* APP_PUBLISHED */]: `App "{{ name }}" published`,
  ["app:unpublished" /* APP_UNPUBLISHED */]: `App "{{ name }}" unpublished`,
  ["app:template:imported" /* APP_TEMPLATE_IMPORTED */]: `App "{{ name }}" template imported`,
  ["app:file:imported" /* APP_FILE_IMPORTED */]: `App "{{ name }}" file imported`,
  ["app:version:updated" /* APP_VERSION_UPDATED */]: `App "{{ name }}" version updated`,
  ["app:version:reverted" /* APP_VERSION_REVERTED */]: `App "{{ name }}" version reverted`,
  ["app:reverted" /* APP_REVERTED */]: `App "{{ name }}" reverted`,
  ["app:exported" /* APP_EXPORTED */]: `App "{{ name }}" exported`,
  ["app:backup:restored" /* APP_BACKUP_RESTORED */]: `App backup "{{ name }}" restored`,
  ["app:backup:triggered" /* APP_BACKUP_TRIGGERED */]: `App backup "{{ name }}" triggered`,
  // DATASOURCE
  ["datasource:created" /* DATASOURCE_CREATED */]: `Datasource created`,
  ["datasource:updated" /* DATASOURCE_UPDATED */]: `Datasource updated`,
  ["datasource:deleted" /* DATASOURCE_DELETED */]: `Datasource deleted`,
  // QUERY
  ["query:created" /* QUERY_CREATED */]: `Query created`,
  ["query:updated" /* QUERY_UPDATED */]: `Query updated`,
  ["query:deleted" /* QUERY_DELETED */]: `Query deleted`,
  ["query:import" /* QUERY_IMPORT */]: `Query import`,
  ["queries:run" /* QUERIES_RUN */]: void 0,
  ["query:previewed" /* QUERY_PREVIEWED */]: void 0,
  // TABLE
  ["table:created" /* TABLE_CREATED */]: `Table "{{ name }}" created`,
  ["table:updated" /* TABLE_UPDATED */]: `Table "{{ name }}" updated`,
  ["table:deleted" /* TABLE_DELETED */]: `Table "{{ name }}" deleted`,
  ["table:exported" /* TABLE_EXPORTED */]: `Table "{{ name }}" exported`,
  ["table:imported" /* TABLE_IMPORTED */]: `Table "{{ name }}" imported`,
  ["table:data:imported" /* TABLE_DATA_IMPORTED */]: `Data imported to table`,
  // ROWS
  ["rows:created" /* ROWS_CREATED */]: `Rows created`,
  ["rows:imported" /* ROWS_IMPORTED */]: `Rows imported`,
  // AUTOMATION
  ["automation:created" /* AUTOMATION_CREATED */]: `Automation "{{ name }}" created`,
  ["automation:deleted" /* AUTOMATION_DELETED */]: `Automation "{{ name }}" deleted`,
  ["automation:step:created" /* AUTOMATION_STEP_CREATED */]: `Automation "{{ name }}" step added`,
  ["automation:step:deleted" /* AUTOMATION_STEP_DELETED */]: `Automation "{{ name }}" step removed`,
  ["automation:tested" /* AUTOMATION_TESTED */]: void 0,
  ["automations:run" /* AUTOMATIONS_RUN */]: void 0,
  ["automation:trigger:updated" /* AUTOMATION_TRIGGER_UPDATED */]: void 0,
  // SCREEN
  ["screen:created" /* SCREEN_CREATED */]: `Screen "{{ name }}" created`,
  ["screen:deleted" /* SCREEN_DELETED */]: `Screen "{{ name }}" deleted`,
  // COMPONENT
  ["component:created" /* COMPONENT_CREATED */]: `Component created`,
  ["component:deleted" /* COMPONENT_DELETED */]: `Component deleted`,
  // ENVIRONMENT VARIABLE
  ["environment_variable:created" /* ENVIRONMENT_VARIABLE_CREATED */]: `Environment variable created`,
  ["environment_variable:deleted" /* ENVIRONMENT_VARIABLE_DELETED */]: `Environment variable deleted`,
  ["environment_variable:upgrade_panel_opened" /* ENVIRONMENT_VARIABLE_UPGRADE_PANEL_OPENED */]: void 0,
  // PLUGIN
  ["plugin:imported" /* PLUGIN_IMPORTED */]: `Plugin imported`,
  ["plugin:deleted" /* PLUGIN_DELETED */]: `Plugin deleted`,
  ["plugin:init" /* PLUGIN_INIT */]: void 0,
  // ROLE - NOT AUDITED
  ["role:created" /* ROLE_CREATED */]: void 0,
  ["role:updated" /* ROLE_UPDATED */]: void 0,
  ["role:deleted" /* ROLE_DELETED */]: void 0,
  ["role:assigned" /* ROLE_ASSIGNED */]: void 0,
  ["role:unassigned" /* ROLE_UNASSIGNED */]: void 0,
  // LICENSE - NOT AUDITED
  ["license:plan:changed" /* LICENSE_PLAN_CHANGED */]: void 0,
  ["license:activated" /* LICENSE_ACTIVATED */]: void 0,
  ["license:payment:failed" /* LICENSE_PAYMENT_FAILED */]: void 0,
  ["license:payment:recovered" /* LICENSE_PAYMENT_RECOVERED */]: void 0,
  ["license:checkout:opened" /* LICENSE_CHECKOUT_OPENED */]: void 0,
  ["license:checkout:success" /* LICENSE_CHECKOUT_SUCCESS */]: void 0,
  ["license:portal:opened" /* LICENSE_PORTAL_OPENED */]: void 0,
  // ACCOUNT - NOT AUDITED
  ["account:created" /* ACCOUNT_CREATED */]: void 0,
  ["account:deleted" /* ACCOUNT_DELETED */]: void 0,
  ["account:verified" /* ACCOUNT_VERIFIED */]: void 0,
  // BACKFILL - NOT AUDITED
  ["app:backfill:succeeded" /* APP_BACKFILL_SUCCEEDED */]: void 0,
  ["app:backfill:failed" /* APP_BACKFILL_FAILED */]: void 0,
  ["tenant:backfill:succeeded" /* TENANT_BACKFILL_SUCCEEDED */]: void 0,
  ["tenant:backfill:failed" /* TENANT_BACKFILL_FAILED */]: void 0,
  ["installation:backfill:succeeded" /* INSTALLATION_BACKFILL_SUCCEEDED */]: void 0,
  ["installation:backfill:failed" /* INSTALLATION_BACKFILL_FAILED */]: void 0,
  // LAYOUT - NOT AUDITED
  ["layout:created" /* LAYOUT_CREATED */]: void 0,
  ["layout:deleted" /* LAYOUT_DELETED */]: void 0,
  // VIEW - NOT AUDITED
  ["view:created" /* VIEW_CREATED */]: void 0,
  ["view:updated" /* VIEW_UPDATED */]: void 0,
  ["view:deleted" /* VIEW_DELETED */]: void 0,
  ["view:exported" /* VIEW_EXPORTED */]: void 0,
  ["view:filter:created" /* VIEW_FILTER_CREATED */]: void 0,
  ["view:filter:updated" /* VIEW_FILTER_UPDATED */]: void 0,
  ["view:filter:deleted" /* VIEW_FILTER_DELETED */]: void 0,
  ["view:calculation:created" /* VIEW_CALCULATION_CREATED */]: void 0,
  ["view:calculation:updated" /* VIEW_CALCULATION_UPDATED */]: void 0,
  ["view:calculation:deleted" /* VIEW_CALCULATION_DELETED */]: void 0,
  // SERVED - NOT AUDITED
  ["served:builder" /* SERVED_BUILDER */]: void 0,
  ["served:app" /* SERVED_APP */]: void 0,
  ["served:app:preview" /* SERVED_APP_PREVIEW */]: void 0,
  // ANALYTICS - NOT AUDITED
  ["analytics:opt:out" /* ANALYTICS_OPT_OUT */]: void 0,
  ["analytics:opt:in" /* ANALYTICS_OPT_IN */]: void 0,
  // INSTALLATION - NOT AUDITED
  ["installation:version:checked" /* INSTALLATION_VERSION_CHECKED */]: void 0,
  ["installation:version:upgraded" /* INSTALLATION_VERSION_UPGRADED */]: void 0,
  ["installation:version:downgraded" /* INSTALLATION_VERSION_DOWNGRADED */]: void 0,
  ["installation:firstStartup" /* INSTALLATION_FIRST_STARTUP */]: void 0,
  // AUDIT LOG - NOT AUDITED
  ["audit_log:filtered" /* AUDIT_LOGS_FILTERED */]: void 0,
  ["audit_log:downloaded" /* AUDIT_LOGS_DOWNLOADED */]: void 0
};

// src/sdk/events/identification.ts
var GroupType = /* @__PURE__ */ ((GroupType2) => {
  GroupType2["TENANT"] = "tenant";
  GroupType2["INSTALLATION"] = "installation";
  return GroupType2;
})(GroupType || {});
var IdentityType = /* @__PURE__ */ ((IdentityType2) => {
  IdentityType2["USER"] = "user";
  IdentityType2["TENANT"] = "tenant";
  IdentityType2["INSTALLATION"] = "installation";
  return IdentityType2;
})(IdentityType || {});

// src/sdk/licensing/plan.ts
var PlanType = /* @__PURE__ */ ((PlanType3) => {
  PlanType3["FREE"] = "free";
  PlanType3["PRO"] = "pro";
  PlanType3["TEAM"] = "team";
  PlanType3["PREMIUM"] = "premium";
  PlanType3["PREMIUM_PLUS"] = "premium_plus";
  PlanType3["PREMIUM_PLUS_TRIAL"] = "premium_plus_trial";
  PlanType3["BUSINESS"] = "business";
  PlanType3["ENTERPRISE_BASIC"] = "enterprise_basic";
  PlanType3["ENTERPRISE_BASIC_TRIAL"] = "enterprise_basic_trial";
  PlanType3["ENTERPRISE"] = "enterprise";
  return PlanType3;
})(PlanType || {});
var PriceDuration = /* @__PURE__ */ ((PriceDuration2) => {
  PriceDuration2["MONTHLY"] = "monthly";
  PriceDuration2["YEARLY"] = "yearly";
  return PriceDuration2;
})(PriceDuration || {});
var PlanModel = /* @__PURE__ */ ((PlanModel2) => {
  PlanModel2["PER_USER"] = "perUser";
  PlanModel2["PER_CREATOR_PER_USER"] = "per_creator_per_user";
  PlanModel2["DAY_PASS"] = "dayPass";
  return PlanModel2;
})(PlanModel || {});

// src/sdk/licensing/quota.ts
var QuotaUsageType = /* @__PURE__ */ ((QuotaUsageType2) => {
  QuotaUsageType2["STATIC"] = "static";
  QuotaUsageType2["MONTHLY"] = "monthly";
  return QuotaUsageType2;
})(QuotaUsageType || {});
var QuotaType = /* @__PURE__ */ ((QuotaType2) => {
  QuotaType2["USAGE"] = "usage";
  QuotaType2["CONSTANT"] = "constant";
  return QuotaType2;
})(QuotaType || {});
var StaticQuotaName = /* @__PURE__ */ ((StaticQuotaName2) => {
  StaticQuotaName2["ROWS"] = "rows";
  StaticQuotaName2["APPS"] = "apps";
  StaticQuotaName2["USERS"] = "users";
  StaticQuotaName2["CREATORS"] = "creators";
  StaticQuotaName2["USER_GROUPS"] = "userGroups";
  StaticQuotaName2["PLUGINS"] = "plugins";
  return StaticQuotaName2;
})(StaticQuotaName || {});
var MonthlyQuotaName = /* @__PURE__ */ ((MonthlyQuotaName2) => {
  MonthlyQuotaName2["QUERIES"] = "queries";
  MonthlyQuotaName2["AUTOMATIONS"] = "automations";
  MonthlyQuotaName2["DAY_PASSES"] = "dayPasses";
  return MonthlyQuotaName2;
})(MonthlyQuotaName || {});
var ConstantQuotaName = /* @__PURE__ */ ((ConstantQuotaName2) => {
  ConstantQuotaName2["AUTOMATION_LOG_RETENTION_DAYS"] = "automationLogRetentionDays";
  ConstantQuotaName2["APP_BACKUPS_RETENTION_DAYS"] = "appBackupRetentionDays";
  return ConstantQuotaName2;
})(ConstantQuotaName || {});
var isStaticQuota = (quotaType, usageType, name) => {
  return quotaType === "usage" /* USAGE */ && usageType === "static" /* STATIC */;
};
var isMonthlyQuota = (quotaType, usageType, name) => {
  return quotaType === "usage" /* USAGE */ && usageType === "monthly" /* MONTHLY */;
};
var isConstantQuota = (quotaType, name) => {
  return quotaType === "constant" /* CONSTANT */;
};

// src/sdk/licensing/feature.ts
var Feature = /* @__PURE__ */ ((Feature3) => {
  Feature3["USER_GROUPS"] = "userGroups";
  Feature3["APP_BACKUPS"] = "appBackups";
  Feature3["ENVIRONMENT_VARIABLES"] = "environmentVariables";
  Feature3["AUDIT_LOGS"] = "auditLogs";
  Feature3["ENFORCEABLE_SSO"] = "enforceableSSO";
  Feature3["BRANDING"] = "branding";
  Feature3["SCIM"] = "scim";
  Feature3["SYNC_AUTOMATIONS"] = "syncAutomations";
  Feature3["TRIGGER_AUTOMATION_RUN"] = "triggerAutomationRun";
  Feature3["APP_BUILDERS"] = "appBuilders";
  Feature3["OFFLINE"] = "offline";
  Feature3["EXPANDED_PUBLIC_API"] = "expandedPublicApi";
  Feature3["VIEW_PERMISSIONS"] = "viewPermissions";
  Feature3["VIEW_READONLY_COLUMNS"] = "viewReadonlyColumns";
  return Feature3;
})(Feature || {});

// src/sdk/migrations.ts
var MigrationType = /* @__PURE__ */ ((MigrationType2) => {
  MigrationType2["GLOBAL"] = "global";
  MigrationType2["APP"] = "app";
  MigrationType2["INSTALLATION"] = "installation";
  return MigrationType2;
})(MigrationType || {});
var MigrationName = /* @__PURE__ */ ((MigrationName2) => {
  MigrationName2["USER_EMAIL_VIEW_CASING"] = "user_email_view_casing";
  MigrationName2["APP_URLS"] = "app_urls";
  MigrationName2["EVENT_APP_BACKFILL"] = "event_app_backfill";
  MigrationName2["EVENT_GLOBAL_BACKFILL"] = "event_global_backfill";
  MigrationName2["EVENT_INSTALLATION_BACKFILL"] = "event_installation_backfill";
  MigrationName2["GLOBAL_INFO_SYNC_USERS"] = "global_info_sync_users";
  MigrationName2["TABLE_SETTINGS_LINKS_TO_ACTIONS"] = "table_settings_links_to_actions";
  MigrationName2["SYNC_QUOTAS"] = "sync_quotas_2";
  return MigrationName2;
})(MigrationName || {});

// src/sdk/datasources.ts
var PASSWORD_REPLACEMENT = "--secret-value--";
var Operation = /* @__PURE__ */ ((Operation2) => {
  Operation2["CREATE"] = "CREATE";
  Operation2["READ"] = "READ";
  Operation2["UPDATE"] = "UPDATE";
  Operation2["DELETE"] = "DELETE";
  Operation2["COUNT"] = "COUNT";
  Operation2["BULK_CREATE"] = "BULK_CREATE";
  Operation2["BULK_UPSERT"] = "BULK_UPSERT";
  Operation2["CREATE_TABLE"] = "CREATE_TABLE";
  Operation2["UPDATE_TABLE"] = "UPDATE_TABLE";
  Operation2["DELETE_TABLE"] = "DELETE_TABLE";
  return Operation2;
})(Operation || {});
var RowOperations = [
  "CREATE" /* CREATE */,
  "READ" /* READ */,
  "UPDATE" /* UPDATE */,
  "DELETE" /* DELETE */,
  "BULK_CREATE" /* BULK_CREATE */,
  "BULK_UPSERT" /* BULK_UPSERT */
];
var QueryType = /* @__PURE__ */ ((QueryType2) => {
  QueryType2["SQL"] = "sql";
  QueryType2["JSON"] = "json";
  QueryType2["FIELDS"] = "fields";
  return QueryType2;
})(QueryType || {});
var DatasourceFieldType = /* @__PURE__ */ ((DatasourceFieldType2) => {
  DatasourceFieldType2["STRING"] = "string";
  DatasourceFieldType2["CODE"] = "code";
  DatasourceFieldType2["LONGFORM"] = "longForm";
  DatasourceFieldType2["BOOLEAN"] = "boolean";
  DatasourceFieldType2["NUMBER"] = "number";
  DatasourceFieldType2["PASSWORD"] = "password";
  DatasourceFieldType2["LIST"] = "list";
  DatasourceFieldType2["OBJECT"] = "object";
  DatasourceFieldType2["JSON"] = "json";
  DatasourceFieldType2["FILE"] = "file";
  DatasourceFieldType2["FIELD_GROUP"] = "fieldGroup";
  DatasourceFieldType2["SELECT"] = "select";
  return DatasourceFieldType2;
})(DatasourceFieldType || {});
var SourceName = /* @__PURE__ */ ((SourceName2) => {
  SourceName2["POSTGRES"] = "POSTGRES";
  SourceName2["DYNAMODB"] = "DYNAMODB";
  SourceName2["MONGODB"] = "MONGODB";
  SourceName2["ELASTICSEARCH"] = "ELASTICSEARCH";
  SourceName2["COUCHDB"] = "COUCHDB";
  SourceName2["SQL_SERVER"] = "SQL_SERVER";
  SourceName2["S3"] = "S3";
  SourceName2["AIRTABLE"] = "AIRTABLE";
  SourceName2["MYSQL"] = "MYSQL";
  SourceName2["ARANGODB"] = "ARANGODB";
  SourceName2["REST"] = "REST";
  SourceName2["ORACLE"] = "ORACLE";
  SourceName2["GOOGLE_SHEETS"] = "GOOGLE_SHEETS";
  SourceName2["FIRESTORE"] = "FIRESTORE";
  SourceName2["REDIS"] = "REDIS";
  SourceName2["SNOWFLAKE"] = "SNOWFLAKE";
  SourceName2["BUDIBASE"] = "BUDIBASE";
  return SourceName2;
})(SourceName || {});
var IncludeRelationship = /* @__PURE__ */ ((IncludeRelationship2) => {
  IncludeRelationship2[IncludeRelationship2["INCLUDE"] = 1] = "INCLUDE";
  IncludeRelationship2[IncludeRelationship2["EXCLUDE"] = 0] = "EXCLUDE";
  return IncludeRelationship2;
})(IncludeRelationship || {});
var FilterType = /* @__PURE__ */ ((FilterType2) => {
  FilterType2["STRING"] = "string";
  FilterType2["FUZZY"] = "fuzzy";
  FilterType2["RANGE"] = "range";
  FilterType2["EQUAL"] = "equal";
  FilterType2["NOT_EQUAL"] = "notEqual";
  FilterType2["EMPTY"] = "empty";
  FilterType2["NOT_EMPTY"] = "notEmpty";
  FilterType2["ONE_OF"] = "oneOf";
  return FilterType2;
})(FilterType || {});
var DatasourceFeature = /* @__PURE__ */ ((DatasourceFeature2) => {
  DatasourceFeature2["CONNECTION_CHECKING"] = "connection";
  DatasourceFeature2["FETCH_TABLE_NAMES"] = "fetch_table_names";
  DatasourceFeature2["EXPORT_SCHEMA"] = "export_schema";
  return DatasourceFeature2;
})(DatasourceFeature || {});
var DSPlusOperation = /* @__PURE__ */ ((DSPlusOperation2) => {
  DSPlusOperation2["CREATE"] = "create";
  DSPlusOperation2["READ"] = "read";
  DSPlusOperation2["UPDATE"] = "update";
  DSPlusOperation2["DELETE"] = "delete";
  return DSPlusOperation2;
})(DSPlusOperation || {});

// src/sdk/search.ts
var BasicOperator = /* @__PURE__ */ ((BasicOperator2) => {
  BasicOperator2["EQUAL"] = "equal";
  BasicOperator2["NOT_EQUAL"] = "notEqual";
  BasicOperator2["EMPTY"] = "empty";
  BasicOperator2["NOT_EMPTY"] = "notEmpty";
  BasicOperator2["FUZZY"] = "fuzzy";
  BasicOperator2["STRING"] = "string";
  return BasicOperator2;
})(BasicOperator || {});
var ArrayOperator = /* @__PURE__ */ ((ArrayOperator2) => {
  ArrayOperator2["CONTAINS"] = "contains";
  ArrayOperator2["NOT_CONTAINS"] = "notContains";
  ArrayOperator2["CONTAINS_ANY"] = "containsAny";
  ArrayOperator2["ONE_OF"] = "oneOf";
  return ArrayOperator2;
})(ArrayOperator || {});
var RangeOperator = /* @__PURE__ */ ((RangeOperator2) => {
  RangeOperator2["RANGE"] = "range";
  return RangeOperator2;
})(RangeOperator || {});
var InternalSearchFilterOperator = /* @__PURE__ */ ((InternalSearchFilterOperator2) => {
  InternalSearchFilterOperator2["COMPLEX_ID_OPERATOR"] = "_complexIdOperator";
  return InternalSearchFilterOperator2;
})(InternalSearchFilterOperator || {});
var EmptyFilterOption = /* @__PURE__ */ ((EmptyFilterOption2) => {
  EmptyFilterOption2["RETURN_ALL"] = "all";
  EmptyFilterOption2["RETURN_NONE"] = "none";
  return EmptyFilterOption2;
})(EmptyFilterOption || {});
var SqlClient = /* @__PURE__ */ ((SqlClient2) => {
  SqlClient2["MS_SQL"] = "mssql";
  SqlClient2["POSTGRES"] = "pg";
  SqlClient2["MY_SQL"] = "mysql2";
  SqlClient2["ORACLE"] = "oracledb";
  SqlClient2["SQL_LITE"] = "sqlite3";
  return SqlClient2;
})(SqlClient || {});

// src/sdk/locks.ts
var LockType = /* @__PURE__ */ ((LockType2) => {
  LockType2["TRY_ONCE"] = "try_once";
  LockType2["TRY_TWICE"] = "try_twice";
  LockType2["DEFAULT"] = "default";
  LockType2["DELAY_500"] = "delay_500";
  LockType2["CUSTOM"] = "custom";
  LockType2["AUTO_EXTEND"] = "auto_extend";
  return LockType2;
})(LockType || {});
var LockName = /* @__PURE__ */ ((LockName2) => {
  LockName2["MIGRATIONS"] = "migrations";
  LockName2["TRIGGER_QUOTA"] = "trigger_quota";
  LockName2["SYNC_ACCOUNT_LICENSE"] = "sync_account_license";
  LockName2["UPDATE_TENANTS_DOC"] = "update_tenants_doc";
  LockName2["PERSIST_WRITETHROUGH"] = "persist_writethrough";
  LockName2["QUOTA_USAGE_EVENT"] = "quota_usage_event";
  LockName2["APP_MIGRATION"] = "app_migrations";
  LockName2["PROCESS_USER_INVITE"] = "process_user_invite";
  return LockName2;
})(LockName || {});

// src/sdk/db.ts
var SearchIndex = /* @__PURE__ */ ((SearchIndex2) => {
  SearchIndex2["ROWS"] = "rows";
  SearchIndex2["AUDIT"] = "audit";
  SearchIndex2["USER"] = "user";
  return SearchIndex2;
})(SearchIndex || {});
var SortOption = /* @__PURE__ */ ((SortOption2) => {
  SortOption2["ASCENDING"] = "asc";
  SortOption2["DESCENDING"] = "desc";
  return SortOption2;
})(SortOption || {});
var isDocument = (doc) => {
  return typeof doc === "object" && doc._id && doc._rev;
};

// src/sdk/middleware/tenancy.ts
var TenantResolutionStrategy = /* @__PURE__ */ ((TenantResolutionStrategy2) => {
  TenantResolutionStrategy2["USER"] = "user";
  TenantResolutionStrategy2["HEADER"] = "header";
  TenantResolutionStrategy2["QUERY"] = "query";
  TenantResolutionStrategy2["SUBDOMAIN"] = "subdomain";
  TenantResolutionStrategy2["PATH"] = "path";
  return TenantResolutionStrategy2;
})(TenantResolutionStrategy || {});

// src/sdk/featureFlag.ts
var FeatureFlag = /* @__PURE__ */ ((FeatureFlag2) => {
  FeatureFlag2["LICENSING"] = "LICENSING";
  FeatureFlag2["PER_CREATOR_PER_USER_PRICE"] = "PER_CREATOR_PER_USER_PRICE";
  FeatureFlag2["PER_CREATOR_PER_USER_PRICE_ALERT"] = "PER_CREATOR_PER_USER_PRICE_ALERT";
  return FeatureFlag2;
})(FeatureFlag || {});

// src/sdk/environmentVariables.ts
var AppEnvironment = /* @__PURE__ */ ((AppEnvironment2) => {
  AppEnvironment2["PRODUCTION"] = "production";
  AppEnvironment2["DEVELOPMENT"] = "development";
  return AppEnvironment2;
})(AppEnvironment || {});

// src/sdk/cli/constants.ts
var CommandWord = /* @__PURE__ */ ((CommandWord2) => {
  CommandWord2["BACKUPS"] = "backups";
  CommandWord2["HOSTING"] = "hosting";
  CommandWord2["ANALYTICS"] = "analytics";
  CommandWord2["HELP"] = "help";
  CommandWord2["PLUGIN"] = "plugins";
  return CommandWord2;
})(CommandWord || {});
var InitType = /* @__PURE__ */ ((InitType2) => {
  InitType2["QUICK"] = "quick";
  InitType2["DIGITAL_OCEAN"] = "do";
  return InitType2;
})(InitType || {});
var AnalyticsEvent = {
  OptOut: "analytics:opt:out",
  OptIn: "analytics:opt:in",
  SelfHostInit: "hosting:init",
  PluginInit: "plugin:init" /* PLUGIN_INIT */
};

// src/sdk/permissions.ts
var PermissionLevel = /* @__PURE__ */ ((PermissionLevel2) => {
  PermissionLevel2["READ"] = "read";
  PermissionLevel2["WRITE"] = "write";
  PermissionLevel2["EXECUTE"] = "execute";
  PermissionLevel2["ADMIN"] = "admin";
  return PermissionLevel2;
})(PermissionLevel || {});
var PermissionType = /* @__PURE__ */ ((PermissionType2) => {
  PermissionType2["APP"] = "app";
  PermissionType2["TABLE"] = "table";
  PermissionType2["USER"] = "user";
  PermissionType2["AUTOMATION"] = "automation";
  PermissionType2["WEBHOOK"] = "webhook";
  PermissionType2["BUILDER"] = "builder";
  PermissionType2["CREATOR"] = "creator";
  PermissionType2["GLOBAL_BUILDER"] = "globalBuilder";
  PermissionType2["QUERY"] = "query";
  PermissionType2["VIEW"] = "view";
  PermissionType2["LEGACY_VIEW"] = "legacy_view";
  return PermissionType2;
})(PermissionType || {});
var PermissionSource = /* @__PURE__ */ ((PermissionSource2) => {
  PermissionSource2["EXPLICIT"] = "EXPLICIT";
  PermissionSource2["INHERITED"] = "INHERITED";
  PermissionSource2["BASE"] = "BASE";
  return PermissionSource2;
})(PermissionSource || {});

// src/documents/account/account.ts
var isCreatePasswordAccount = (account) => account.authType === "password" /* PASSWORD */;
var isPasswordAccount = (account) => account.authType === "password" /* PASSWORD */ && account.hosting === "self" /* SELF */;
var isCloudAccount = (account) => account.hosting === "cloud" /* CLOUD */;
var isSelfHostAccount = (account) => account.hosting === "self" /* SELF */;
var isSSOAccount = (account) => account.authType === "sso" /* SSO */;
var AccountSSOProviderType = /* @__PURE__ */ ((AccountSSOProviderType2) => {
  AccountSSOProviderType2["GOOGLE"] = "google";
  AccountSSOProviderType2["MICROSOFT"] = "microsoft";
  return AccountSSOProviderType2;
})(AccountSSOProviderType || {});
var AccountSSOProvider = /* @__PURE__ */ ((AccountSSOProvider2) => {
  AccountSSOProvider2["GOOGLE"] = "google";
  AccountSSOProvider2["MICROSOFT"] = "microsoft";
  return AccountSSOProvider2;
})(AccountSSOProvider || {});
var verifiableSSOProviders = [
  "microsoft" /* MICROSOFT */
];
function isVerifiableSSOProvider(provider) {
  return verifiableSSOProviders.includes(provider);
}
var AuthType = /* @__PURE__ */ ((AuthType2) => {
  AuthType2["SSO"] = "sso";
  AuthType2["PASSWORD"] = "password";
  return AuthType2;
})(AuthType || {});

// src/documents/app/automation.ts
var AutomationIOType = /* @__PURE__ */ ((AutomationIOType2) => {
  AutomationIOType2["OBJECT"] = "object";
  AutomationIOType2["STRING"] = "string";
  AutomationIOType2["BOOLEAN"] = "boolean";
  AutomationIOType2["NUMBER"] = "number";
  AutomationIOType2["ARRAY"] = "array";
  AutomationIOType2["JSON"] = "json";
  AutomationIOType2["DATE"] = "date";
  AutomationIOType2["ATTACHMENT"] = "attachment";
  return AutomationIOType2;
})(AutomationIOType || {});
var AutomationCustomIOType = /* @__PURE__ */ ((AutomationCustomIOType2) => {
  AutomationCustomIOType2["TABLE"] = "table";
  AutomationCustomIOType2["ROW"] = "row";
  AutomationCustomIOType2["ROWS"] = "rows";
  AutomationCustomIOType2["WIDE"] = "wide";
  AutomationCustomIOType2["QUERY"] = "query";
  AutomationCustomIOType2["QUERY_PARAMS"] = "queryParams";
  AutomationCustomIOType2["QUERY_LIMIT"] = "queryLimit";
  AutomationCustomIOType2["LOOP_OPTION"] = "loopOption";
  AutomationCustomIOType2["ITEM"] = "item";
  AutomationCustomIOType2["CODE"] = "code";
  AutomationCustomIOType2["FILTERS"] = "filters";
  AutomationCustomIOType2["COLUMN"] = "column";
  AutomationCustomIOType2["TRIGGER_SCHEMA"] = "triggerSchema";
  AutomationCustomIOType2["CRON"] = "cron";
  AutomationCustomIOType2["WEBHOOK_URL"] = "webhookUrl";
  AutomationCustomIOType2["AUTOMATION"] = "automation";
  AutomationCustomIOType2["AUTOMATION_FIELDS"] = "automationFields";
  AutomationCustomIOType2["MULTI_ATTACHMENTS"] = "multi_attachments";
  AutomationCustomIOType2["TRIGGER_FILTER"] = "trigger_filter";
  return AutomationCustomIOType2;
})(AutomationCustomIOType || {});
var AutomationTriggerStepId = /* @__PURE__ */ ((AutomationTriggerStepId2) => {
  AutomationTriggerStepId2["ROW_SAVED"] = "ROW_SAVED";
  AutomationTriggerStepId2["ROW_UPDATED"] = "ROW_UPDATED";
  AutomationTriggerStepId2["ROW_DELETED"] = "ROW_DELETED";
  AutomationTriggerStepId2["WEBHOOK"] = "WEBHOOK";
  AutomationTriggerStepId2["APP"] = "APP";
  AutomationTriggerStepId2["CRON"] = "CRON";
  return AutomationTriggerStepId2;
})(AutomationTriggerStepId || {});
var AutomationStepType = /* @__PURE__ */ ((AutomationStepType2) => {
  AutomationStepType2["LOGIC"] = "LOGIC";
  AutomationStepType2["ACTION"] = "ACTION";
  AutomationStepType2["TRIGGER"] = "TRIGGER";
  return AutomationStepType2;
})(AutomationStepType || {});
var AutomationActionStepId = /* @__PURE__ */ ((AutomationActionStepId2) => {
  AutomationActionStepId2["SEND_EMAIL_SMTP"] = "SEND_EMAIL_SMTP";
  AutomationActionStepId2["CREATE_ROW"] = "CREATE_ROW";
  AutomationActionStepId2["UPDATE_ROW"] = "UPDATE_ROW";
  AutomationActionStepId2["DELETE_ROW"] = "DELETE_ROW";
  AutomationActionStepId2["EXECUTE_BASH"] = "EXECUTE_BASH";
  AutomationActionStepId2["OUTGOING_WEBHOOK"] = "OUTGOING_WEBHOOK";
  AutomationActionStepId2["EXECUTE_SCRIPT"] = "EXECUTE_SCRIPT";
  AutomationActionStepId2["EXECUTE_QUERY"] = "EXECUTE_QUERY";
  AutomationActionStepId2["SERVER_LOG"] = "SERVER_LOG";
  AutomationActionStepId2["DELAY"] = "DELAY";
  AutomationActionStepId2["FILTER"] = "FILTER";
  AutomationActionStepId2["QUERY_ROWS"] = "QUERY_ROWS";
  AutomationActionStepId2["LOOP"] = "LOOP";
  AutomationActionStepId2["COLLECT"] = "COLLECT";
  AutomationActionStepId2["OPENAI"] = "OPENAI";
  AutomationActionStepId2["TRIGGER_AUTOMATION_RUN"] = "TRIGGER_AUTOMATION_RUN";
  AutomationActionStepId2["discord"] = "discord";
  AutomationActionStepId2["slack"] = "slack";
  AutomationActionStepId2["zapier"] = "zapier";
  AutomationActionStepId2["integromat"] = "integromat";
  AutomationActionStepId2["n8n"] = "n8n";
  return AutomationActionStepId2;
})(AutomationActionStepId || {});
var AutomationStepIdArray = [
  ...Object.values(AutomationActionStepId),
  ...Object.values(AutomationTriggerStepId)
];
var AutomationFeature = /* @__PURE__ */ ((AutomationFeature2) => {
  AutomationFeature2["LOOPING"] = "LOOPING";
  return AutomationFeature2;
})(AutomationFeature || {});
var AutomationStepStatus = /* @__PURE__ */ ((AutomationStepStatus2) => {
  AutomationStepStatus2["NO_ITERATIONS"] = "no_iterations";
  return AutomationStepStatus2;
})(AutomationStepStatus || {});
var AutomationStatus = /* @__PURE__ */ ((AutomationStatus2) => {
  AutomationStatus2["SUCCESS"] = "success";
  AutomationStatus2["ERROR"] = "error";
  AutomationStatus2["STOPPED"] = "stopped";
  AutomationStatus2["STOPPED_ERROR"] = "stopped_error";
  return AutomationStatus2;
})(AutomationStatus || {});
var AutomationStoppedReason = /* @__PURE__ */ ((AutomationStoppedReason2) => {
  AutomationStoppedReason2["TRIGGER_FILTER_NOT_MET"] = "Automation did not run. Filter conditions in trigger were not met.";
  return AutomationStoppedReason2;
})(AutomationStoppedReason || {});
var AutomationEventType = /* @__PURE__ */ ((AutomationEventType2) => {
  AutomationEventType2["ROW_SAVE"] = "row:save";
  AutomationEventType2["ROW_UPDATE"] = "row:update";
  AutomationEventType2["ROW_DELETE"] = "row:delete";
  AutomationEventType2["APP_TRIGGER"] = "app:trigger";
  AutomationEventType2["CRON_TRIGGER"] = "cron:trigger";
  AutomationEventType2["WEBHOOK_TRIGGER"] = "web:trigger";
  return AutomationEventType2;
})(AutomationEventType || {});

// src/documents/app/datasource.ts
var RestAuthType = /* @__PURE__ */ ((RestAuthType2) => {
  RestAuthType2["BASIC"] = "basic";
  RestAuthType2["BEARER"] = "bearer";
  return RestAuthType2;
})(RestAuthType || {});

// src/documents/app/query.ts
var HttpMethod = /* @__PURE__ */ ((HttpMethod2) => {
  HttpMethod2["GET"] = "GET";
  HttpMethod2["POST"] = "POST";
  HttpMethod2["PATCH"] = "PATCH";
  HttpMethod2["PUT"] = "PUT";
  HttpMethod2["HEAD"] = "HEAD";
  HttpMethod2["DELETE"] = "DELETE";
  return HttpMethod2;
})(HttpMethod || {});

// src/documents/app/table/table.ts
var INTERNAL_TABLE_SOURCE_ID = "bb_internal";
var TableSourceType = /* @__PURE__ */ ((TableSourceType2) => {
  TableSourceType2["EXTERNAL"] = "external";
  TableSourceType2["INTERNAL"] = "internal";
  return TableSourceType2;
})(TableSourceType || {});

// src/documents/app/row.ts
var FieldType = /* @__PURE__ */ ((FieldType2) => {
  FieldType2["STRING"] = "string";
  FieldType2["LONGFORM"] = "longform";
  FieldType2["OPTIONS"] = "options";
  FieldType2["NUMBER"] = "number";
  FieldType2["BOOLEAN"] = "boolean";
  FieldType2["ARRAY"] = "array";
  FieldType2["DATETIME"] = "datetime";
  FieldType2["ATTACHMENTS"] = "attachment";
  FieldType2["ATTACHMENT_SINGLE"] = "attachment_single";
  FieldType2["LINK"] = "link";
  FieldType2["FORMULA"] = "formula";
  FieldType2["AUTO"] = "auto";
  FieldType2["JSON"] = "json";
  FieldType2["INTERNAL"] = "internal";
  FieldType2["BARCODEQR"] = "barcodeqr";
  FieldType2["SIGNATURE_SINGLE"] = "signature_single";
  FieldType2["BIGINT"] = "bigint";
  FieldType2["BB_REFERENCE"] = "bb_reference";
  FieldType2["BB_REFERENCE_SINGLE"] = "bb_reference_single";
  return FieldType2;
})(FieldType || {});
var JsonTypes = [
  "attachment_single" /* ATTACHMENT_SINGLE */,
  "attachment" /* ATTACHMENTS */,
  // only BB_REFERENCE is JSON, it's an array, BB_REFERENCE_SINGLE is a string type
  "bb_reference" /* BB_REFERENCE */,
  "json" /* JSON */,
  "array" /* ARRAY */
];

// src/documents/app/table/constants.ts
var RelationshipType = /* @__PURE__ */ ((RelationshipType2) => {
  RelationshipType2["ONE_TO_MANY"] = "one-to-many";
  RelationshipType2["MANY_TO_ONE"] = "many-to-one";
  RelationshipType2["MANY_TO_MANY"] = "many-to-many";
  return RelationshipType2;
})(RelationshipType || {});
var AutoReason = /* @__PURE__ */ ((AutoReason3) => {
  AutoReason3["FOREIGN_KEY"] = "foreign_key";
  return AutoReason3;
})(AutoReason || {});
var AutoFieldSubType = /* @__PURE__ */ ((AutoFieldSubType3) => {
  AutoFieldSubType3["CREATED_BY"] = "createdBy";
  AutoFieldSubType3["CREATED_AT"] = "createdAt";
  AutoFieldSubType3["UPDATED_BY"] = "updatedBy";
  AutoFieldSubType3["UPDATED_AT"] = "updatedAt";
  AutoFieldSubType3["AUTO_ID"] = "autoID";
  return AutoFieldSubType3;
})(AutoFieldSubType || {});
var JsonFieldSubType = /* @__PURE__ */ ((JsonFieldSubType3) => {
  JsonFieldSubType3["ARRAY"] = "array";
  return JsonFieldSubType3;
})(JsonFieldSubType || {});
var FormulaType = /* @__PURE__ */ ((FormulaType3) => {
  FormulaType3["STATIC"] = "static";
  FormulaType3["DYNAMIC"] = "dynamic";
  return FormulaType3;
})(FormulaType || {});
var BBReferenceFieldSubType = /* @__PURE__ */ ((BBReferenceFieldSubType3) => {
  BBReferenceFieldSubType3["USER"] = "user";
  BBReferenceFieldSubType3["USERS"] = "users";
  return BBReferenceFieldSubType3;
})(BBReferenceFieldSubType || {});

// src/documents/app/table/schema.ts
function isRelationshipField(field) {
  return field.type === "link" /* LINK */;
}
function isManyToMany(field) {
  return field.relationshipType === "many-to-many" /* MANY_TO_MANY */;
}
function isOneToMany(field) {
  return field.relationshipType === "one-to-many" /* ONE_TO_MANY */;
}
function isManyToOne(field) {
  return field.relationshipType === "many-to-one" /* MANY_TO_ONE */;
}

// src/documents/app/view.ts
var ViewCalculation = /* @__PURE__ */ ((ViewCalculation2) => {
  ViewCalculation2["SUM"] = "sum";
  ViewCalculation2["COUNT"] = "count";
  ViewCalculation2["STATISTICS"] = "stats";
  return ViewCalculation2;
})(ViewCalculation || {});

// src/documents/document.ts
var SEPARATOR = "_";
var UNICODE_MAX = "\uFFF0";
var prefixed = (type) => `${type}${SEPARATOR}`;
var DocumentType = /* @__PURE__ */ ((DocumentType2) => {
  DocumentType2["USER"] = "us";
  DocumentType2["GROUP"] = "gr";
  DocumentType2["WORKSPACE"] = "workspace";
  DocumentType2["CONFIG"] = "config";
  DocumentType2["TEMPLATE"] = "template";
  DocumentType2["APP"] = "app";
  DocumentType2["DEV"] = "dev";
  DocumentType2["APP_DEV"] = "app_dev";
  DocumentType2["APP_METADATA"] = "app_metadata";
  DocumentType2["ROLE"] = "role";
  DocumentType2["MIGRATIONS"] = "migrations";
  DocumentType2["DEV_INFO"] = "devinfo";
  DocumentType2["AUTOMATION_LOG"] = "log_au";
  DocumentType2["ACCOUNT_METADATA"] = "acc_metadata";
  DocumentType2["PLUGIN"] = "plg";
  DocumentType2["DATASOURCE"] = "datasource";
  DocumentType2["DATASOURCE_PLUS"] = "datasource_plus";
  DocumentType2["APP_BACKUP"] = "backup";
  DocumentType2["TABLE"] = "ta";
  DocumentType2["ROW"] = "ro";
  DocumentType2["AUTOMATION"] = "au";
  DocumentType2["LINK"] = "li";
  DocumentType2["WEBHOOK"] = "wh";
  DocumentType2["INSTANCE"] = "inst";
  DocumentType2["LAYOUT"] = "layout";
  DocumentType2["SCREEN"] = "screen";
  DocumentType2["QUERY"] = "query";
  DocumentType2["DEPLOYMENTS"] = "deployments";
  DocumentType2["METADATA"] = "metadata";
  DocumentType2["MEM_VIEW"] = "view";
  DocumentType2["USER_FLAG"] = "flag";
  DocumentType2["AUTOMATION_METADATA"] = "meta_au";
  DocumentType2["AUDIT_LOG"] = "al";
  DocumentType2["APP_MIGRATION_METADATA"] = "_design/migrations";
  DocumentType2["SCIM_LOG"] = "scimlog";
  DocumentType2["ROW_ACTIONS"] = "ra";
  return DocumentType2;
})(DocumentType || {});
var DocumentTypesToImport = [
  "role" /* ROLE */,
  "datasource" /* DATASOURCE */,
  "datasource_plus" /* DATASOURCE_PLUS */,
  "ta" /* TABLE */,
  "au" /* AUTOMATION */,
  "wh" /* WEBHOOK */,
  "screen" /* SCREEN */,
  "query" /* QUERY */,
  "metadata" /* METADATA */,
  "view" /* MEM_VIEW */,
  // Deprecated but still copied
  "inst" /* INSTANCE */,
  "layout" /* LAYOUT */
];
var InternalTable = /* @__PURE__ */ ((InternalTable2) => {
  InternalTable2["USER_METADATA"] = "ta_users";
  return InternalTable2;
})(InternalTable || {});
var VirtualDocumentType = /* @__PURE__ */ ((VirtualDocumentType2) => {
  VirtualDocumentType2["VIEW"] = "view";
  VirtualDocumentType2["ROW_ACTION"] = "row_action";
  return VirtualDocumentType2;
})(VirtualDocumentType || {});

// src/documents/app/backup.ts
var AppBackupType = /* @__PURE__ */ ((AppBackupType2) => {
  AppBackupType2["BACKUP"] = "backup";
  AppBackupType2["RESTORE"] = "restore";
  return AppBackupType2;
})(AppBackupType || {});
var AppBackupStatus = /* @__PURE__ */ ((AppBackupStatus2) => {
  AppBackupStatus2["STARTED"] = "started";
  AppBackupStatus2["PENDING"] = "pending";
  AppBackupStatus2["COMPLETE"] = "complete";
  AppBackupStatus2["FAILED"] = "failed";
  return AppBackupStatus2;
})(AppBackupStatus || {});
var AppBackupTrigger = /* @__PURE__ */ ((AppBackupTrigger2) => {
  AppBackupTrigger2["PUBLISH"] = "publish";
  AppBackupTrigger2["MANUAL"] = "manual";
  AppBackupTrigger2["SCHEDULED"] = "scheduled";
  AppBackupTrigger2["RESTORING"] = "restoring";
  return AppBackupTrigger2;
})(AppBackupTrigger || {});

// src/documents/app/webhook.ts
var WebhookActionType = /* @__PURE__ */ ((WebhookActionType2) => {
  WebhookActionType2["AUTOMATION"] = "automation";
  return WebhookActionType2;
})(WebhookActionType || {});

// src/documents/app/sqlite.ts
var SQLiteType = /* @__PURE__ */ ((SQLiteType2) => {
  SQLiteType2["REAL"] = "REAL";
  SQLiteType2["TEXT"] = "VARCHAR";
  SQLiteType2["INT"] = "INTEGER";
  SQLiteType2["BLOB"] = "BLOB";
  SQLiteType2["NUMERIC"] = "NUMERIC";
  return SQLiteType2;
})(SQLiteType || {});

// src/documents/global/config.ts
var isSettingsConfig = (config) => config.type === "settings" /* SETTINGS */;
var isSMTPConfig = (config) => config.type === "smtp" /* SMTP */;
var isGoogleConfig = (config) => config.type === "google" /* GOOGLE */;
var isOIDCConfig = (config) => config.type === "oidc" /* OIDC */;
var isSCIMConfig = (config) => config.type === "scim" /* SCIM */;
var ConfigType = /* @__PURE__ */ ((ConfigType2) => {
  ConfigType2["SETTINGS"] = "settings";
  ConfigType2["ACCOUNT"] = "account";
  ConfigType2["SMTP"] = "smtp";
  ConfigType2["GOOGLE"] = "google";
  ConfigType2["OIDC"] = "oidc";
  ConfigType2["OIDC_LOGOS"] = "logos_oidc";
  ConfigType2["SCIM"] = "scim";
  return ConfigType2;
})(ConfigType || {});

// src/documents/global/user.ts
var SSOProviderType = /* @__PURE__ */ ((SSOProviderType2) => {
  SSOProviderType2["OIDC"] = "oidc";
  SSOProviderType2["GOOGLE"] = "google";
  return SSOProviderType2;
})(SSOProviderType || {});
function isSSOUser(user) {
  return !!user.providerType;
}
var UserStatus = /* @__PURE__ */ ((UserStatus2) => {
  UserStatus2["ACTIVE"] = "active";
  UserStatus2["INACTIVE"] = "inactive";
  return UserStatus2;
})(UserStatus || {});
function isUser(user) {
  return !!user.roles;
}

// src/documents/global/plugin.ts
var PluginType = /* @__PURE__ */ ((PluginType2) => {
  PluginType2["DATASOURCE"] = "datasource";
  PluginType2["COMPONENT"] = "component";
  PluginType2["AUTOMATION"] = "automation";
  return PluginType2;
})(PluginType || {});
var PluginSource = /* @__PURE__ */ ((PluginSource2) => {
  PluginSource2["NPM"] = "NPM";
  PluginSource2["GITHUB"] = "Github";
  PluginSource2["URL"] = "URL";
  PluginSource2["FILE"] = "File Upload";
  return PluginSource2;
})(PluginSource || {});
var PLUGIN_TYPE_ARR = Object.values(PluginType);

// src/documents/global/quotas.ts
var BreakdownQuotaName = /* @__PURE__ */ ((BreakdownQuotaName2) => {
  BreakdownQuotaName2["ROW_QUERIES"] = "rowQueries";
  BreakdownQuotaName2["DATASOURCE_QUERIES"] = "datasourceQueries";
  BreakdownQuotaName2["AUTOMATIONS"] = "automations";
  return BreakdownQuotaName2;
})(BreakdownQuotaName || {});
var APP_QUOTA_NAMES = [
  "rows" /* ROWS */,
  "queries" /* QUERIES */,
  "automations" /* AUTOMATIONS */
];
var BREAKDOWN_QUOTA_NAMES = [
  "queries" /* QUERIES */,
  "automations" /* AUTOMATIONS */
];

// src/documents/global/schedule.ts
var ScheduleType = /* @__PURE__ */ ((ScheduleType2) => {
  ScheduleType2["APP_BACKUP"] = "app_backup";
  return ScheduleType2;
})(ScheduleType || {});
var ScheduleRepeatPeriod = /* @__PURE__ */ ((ScheduleRepeatPeriod2) => {
  ScheduleRepeatPeriod2["DAILY"] = "daily";
  ScheduleRepeatPeriod2["WEEKLY"] = "weekly";
  ScheduleRepeatPeriod2["MONTHLY"] = "monthly";
  return ScheduleRepeatPeriod2;
})(ScheduleRepeatPeriod || {});
var isAppBackupMetadata = (type, metadata) => {
  return type === "app_backup" /* APP_BACKUP */;
};

// src/documents/global/auditLogs.ts
var AuditLogSystemUser = "SYSTEM";
var AUDIT_LOG_TYPE = "auditLog";

// src/api/web/analytics.ts
var PingSource = /* @__PURE__ */ ((PingSource2) => {
  PingSource2["BUILDER"] = "builder";
  PingSource2["APP"] = "app";
  return PingSource2;
})(PingSource || {});

// src/api/web/global/auditLogs.ts
var AuditLogResourceStatus = /* @__PURE__ */ ((AuditLogResourceStatus2) => {
  AuditLogResourceStatus2["DELETED"] = "deleted";
  return AuditLogResourceStatus2;
})(AuditLogResourceStatus || {});

// src/api/web/global/events.ts
var EventPublishType = /* @__PURE__ */ ((EventPublishType2) => {
  EventPublishType2["ENVIRONMENT_VARIABLE_UPGRADE_PANEL_OPENED"] = "environment_variable_upgrade_panel_opened";
  return EventPublishType2;
})(EventPublishType || {});

// src/api/web/pagination.ts
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASCENDING"] = "ascending";
  SortOrder2["DESCENDING"] = "descending";
  return SortOrder2;
})(SortOrder || {});
var SortType = /* @__PURE__ */ ((SortType2) => {
  SortType2["STRING"] = "string";
  SortType2["NUMBER"] = "number";
  return SortType2;
})(SortType || {});

// src/core/installation.ts
var ServiceType = /* @__PURE__ */ ((ServiceType2) => {
  ServiceType2["WORKER"] = "worker";
  ServiceType2["APPS"] = "apps";
  return ServiceType2;
})(ServiceType || {});
var MaintenanceType = /* @__PURE__ */ ((MaintenanceType2) => {
  MaintenanceType2["SQS_MISSING"] = "sqs_missing";
  return MaintenanceType2;
})(MaintenanceType || {});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  APP_QUOTA_NAMES,
  AUDIT_LOG_TYPE,
  AccountSSOProvider,
  AccountSSOProviderType,
  AnalyticsEvent,
  AppBackupStatus,
  AppBackupTrigger,
  AppBackupType,
  AppEnvironment,
  ArrayOperator,
  AsyncEvents,
  AuditLogResourceStatus,
  AuditLogSystemUser,
  AuditedEventFriendlyName,
  AuthType,
  AutoFieldSubType,
  AutoReason,
  AutomationActionStepId,
  AutomationCustomIOType,
  AutomationEventType,
  AutomationFeature,
  AutomationIOType,
  AutomationStatus,
  AutomationStepIdArray,
  AutomationStepStatus,
  AutomationStepType,
  AutomationStoppedReason,
  AutomationTriggerStepId,
  BBReferenceFieldSubType,
  BREAKDOWN_QUOTA_NAMES,
  BasicOperator,
  BreakdownQuotaName,
  CommandWord,
  ConfigType,
  ConstantQuotaName,
  DSPlusOperation,
  DatasourceFeature,
  DatasourceFieldType,
  DocumentType,
  DocumentTypesToImport,
  EmptyFilterOption,
  Event,
  EventPublishType,
  Feature,
  FeatureFlag,
  FieldType,
  FilterType,
  FormulaType,
  GroupType,
  Hosting,
  HttpMethod,
  INTERNAL_TABLE_SOURCE_ID,
  IdentityType,
  IncludeRelationship,
  InitType,
  InternalSearchFilterOperator,
  InternalTable,
  JsonFieldSubType,
  JsonTypes,
  LockName,
  LockType,
  MaintenanceType,
  MigrationName,
  MigrationType,
  MonthlyQuotaName,
  Operation,
  PASSWORD_REPLACEMENT,
  PLUGIN_TYPE_ARR,
  PermissionLevel,
  PermissionSource,
  PermissionType,
  PingSource,
  PlanModel,
  PlanType,
  PluginSource,
  PluginType,
  PriceDuration,
  QueryType,
  QuotaType,
  QuotaUsageType,
  RangeOperator,
  RelationshipType,
  RestAuthType,
  RowOperations,
  SEPARATOR,
  SQLiteType,
  SSOProviderType,
  ScheduleRepeatPeriod,
  ScheduleType,
  SearchIndex,
  ServiceType,
  SortOption,
  SortOrder,
  SortType,
  SourceName,
  SqlClient,
  StaticQuotaName,
  TableSourceType,
  TenantResolutionStrategy,
  UNICODE_MAX,
  UserGroupSyncEvents,
  UserStatus,
  ViewCalculation,
  VirtualDocumentType,
  WebhookActionType,
  isAppBackupMetadata,
  isCloudAccount,
  isConstantQuota,
  isCreatePasswordAccount,
  isDocument,
  isGoogleConfig,
  isManyToMany,
  isManyToOne,
  isMonthlyQuota,
  isOIDCConfig,
  isOneToMany,
  isPasswordAccount,
  isRelationshipField,
  isSCIMConfig,
  isSMTPConfig,
  isSSOAccount,
  isSSOUser,
  isSelfHostAccount,
  isSettingsConfig,
  isStaticQuota,
  isUser,
  isVerifiableSSOProvider,
  prefixed
});
//# sourceMappingURL=index.js.map
