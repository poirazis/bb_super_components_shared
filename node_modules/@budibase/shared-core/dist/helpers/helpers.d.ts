import { User } from "@budibase/types";
/**
 * Gets a key within an object. The key supports dot syntax for retrieving deep
 * fields - e.g. "a.b.c".
 * Exact matches of keys with dots in them take precedence over nested keys of
 * the same path - e.g. getting "a.b" from { "a.b": "foo", a: { b: "bar" } }
 * will return "foo" over "bar".
 * @param obj the object
 * @param key the key
 * @return the value or null if a value was not found for this key
 */
export declare const deepGet: (obj: {
    [x: string]: any;
}, key: string) => any;
/**
 * Gets the initials to show in a user avatar.
 * @param user the user
 */
export declare const getUserInitials: (user: User) => string;
/**
 * Gets a deterministic colour for a particular user
 * @param user the user
 */
export declare const getUserColor: (user: User) => string;
/**
 * Gets a friendly label to describe who a user is.
 * @param user the user
 */
export declare const getUserLabel: (user: User) => string;
export declare function cancelableTimeout(timeout: number): [Promise<unknown>, () => void];
export declare function withTimeout<T>(timeout: number, promise: Promise<T>): Promise<T>;
