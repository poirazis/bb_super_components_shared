import { Datasource, BBReferenceFieldSubType, FieldType, FormulaType, SearchFilter, SearchFilters, SearchFilterOperator, SortDirection, SortType, FieldConstraints } from "@budibase/types";
/**
 * Returns the valid operator options for a certain data type
 */
export declare const getValidOperatorsForType: (fieldType: {
    type: FieldType;
    subtype?: BBReferenceFieldSubType;
    formulaType?: FormulaType;
    constraints?: FieldConstraints;
}, field?: string, datasource?: Datasource & {
    tableId: any;
}) => {
    value: string;
    label: string;
}[];
/**
 * Operators which do not support empty strings as values
 */
export declare const NoEmptyFilterStrings: SearchFilterOperator[];
/**
 * Removes a numeric prefix on field names designed to give fields uniqueness
 */
export declare const removeKeyNumbering: (key: string) => string;
/**
 * Builds a lucene JSON query from the filter structure generated in the builder
 * @param filter the builder filter structure
 */
export declare const buildLuceneQuery: (filter: SearchFilter[]) => SearchFilters;
/**
 * Performs a client-side lucene search on an array of data
 * @param docs the data
 * @param query the JSON lucene query
 */
export declare const runLuceneQuery: (docs: any[], query?: SearchFilters) => any[];
/**
 * Performs a client-side sort from the equivalent server-side lucene sort
 * parameters.
 * @param docs the data
 * @param sort the sort column
 * @param sortOrder the sort order ("ascending" or "descending")
 * @param sortType the type of sort ("string" or "number")
 */
export declare const luceneSort: (docs: any[], sort: string, sortOrder: SortDirection, sortType?: SortType) => any[];
/**
 * Limits the specified docs to the specified number of rows from the equivalent
 * server-side lucene limit parameters.
 * @param docs the data
 * @param limit the number of docs to limit to
 */
export declare const luceneLimit: (docs: any[], limit: string) => any[];
export declare const hasFilters: (query?: SearchFilters) => boolean;
